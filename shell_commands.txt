from news.models import *

1. Создать двух пользователей (с помощью метода User.objects.create_user('username')).

user1 = User.objects.create_user(username='Alex')
user2 = User.objects.create_user(username='Oleg')

2. Создать два объекта модели Author, связанные с пользователями.

author1 = Author.objects.create(authorUser=user1)
author2 = Author.objects.create(authorUser=user2)

3. Добавить 4 категории в модель Category.

Category.objects.create(name='DIVING')
Category.objects.create(name='FISHING')
Category.objects.create(name='HIKING')
Category.objects.create(name='TRAVEL')

4. Добавить 2 статьи и 1 новость.

post1 = Post.objects.create(author=author1, title='New post (article) from Alex, for test', text='text information for post as news from Alex about diving only')

post2 = Post.objects.create(author=author2, title='One new post from Oleg, for test', text='text information for post from Oleg abount diving and travel')

post3 = Post.objects.create(author=author2, categoryType='NW', title='New post from Oleg, for test', text='text information for post as news from Oleg about hiking only')

5. Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).

Post.objects.get(id=1).postCategory.add(Category.objects.get(id=1))
Post.objects.get(id=2).postCategory.add(Category.objects.get(id=1))
Post.objects.get(id=2).postCategory.add(Category.objects.get(id=4))
Post.objects.get(id=3).postCategory.add(Category.objects.get(id=3))

6. Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий).

comment1 = Comment.objects.create(commentPost=Post.objects.get(id=1), commentUser=Author.objects.get(id=1).authorUser, text='comment from author of the post')
comment2 = Comment.objects.create(commentPost=Post.objects.get(id=2), commentUser=User.objects.get(id=2), text='one more comment from user with ID = 2')

7. Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.

comment2.like()
comment1.like()
comment2.like()
comment2.dislike()
post1.like()
post2.dislike()
post1.like()
post3.dislike()

8. Обновить рейтинги пользователей.

author1.update_rating()
author2.update_rating()

9. Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта).

a = Author.objects.order_by('-authorRating')
a[0].authorUser.username, a[0].authorRating

10. Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.

p = Post.objects.order_by('-rating')
p[0]

или

p[0].dateCreation, p[0].author.authorUser.username, p[0].rating, p[0].__dict__['title'], p[0].preview()


11. Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.

q = Comment.objects.all().filter(commentPost=p[0])
